from __future__ import annotations

import io
from typing import BinaryIO

import pytest

from dissect.ntfs.c_ntfs import FILE_NUMBER_MFT
from dissect.ntfs.exceptions import MftNotAvailableError, VolumeNotAvailableError
from dissect.ntfs.mft import Mft, MftRecord
from dissect.ntfs.ntfs import NTFS


def test_mft(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)

    assert fs.mft
    assert len(list(fs.mft.segments())) == 37

    with pytest.raises(VolumeNotAvailableError):
        assert fs.mft.get(FILE_NUMBER_MFT).open()


def test_mft_record_get_no_mft(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)

    root = fs.mft.root
    fs.mft = None

    with pytest.raises(MftNotAvailableError):
        root.get("$MFT")


def test_mft_record() -> None:
    # Single MFT record of the $MFT file itself.
    data = bytes.fromhex(
        "46494c453000030051511000000000000100010038000100a001000000040000"
        "0000000000000000070000000000000002000000000000001000000060000000"
        "00001800000000004800000018000000d2145d665666d801d2145d665666d801"
        "d2145d665666d801d2145d665666d80106000000000000000000000000000000"
        "0000000000010000000000000000000000000000000000003000000068000000"
        "00001800000003004a000000180001000500000000000500d2145d665666d801"
        "d2145d665666d801d2145d665666d801d2145d665666d8010040000000000000"
        "00400000000000000600000000000000040324004d0046005400000000000000"
        "8000000048000000010040000000060000000000000000003f00000000000000"
        "4000000000000000000004000000000000000400000000000000040000000000"
        "2140550200000000b00000005000000001004000000005000000000000000000"
        "0100000000000000400000000000000000200000000000000810000000000000"
        "0810000000000000210154022101d1fd0000000000000000ffffffff00000000"
        "00000400000000002140550200000000b0000000500000000100400000000500"
        "0000000000000000010000000000000040000000000000000020000000000000"
        "08100000000000000810000000000000210154022101d1fd0000000000000200"
        "ffffffff00000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000200"
    )
    record = MftRecord.from_bytes(data)
    attrs = record.attributes

    assert not record.resident
    assert record.filename == "$MFT"
    assert record.filenames() == ["$MFT"]
    assert record.is_file()
    assert record.size() == 262144
    assert len(attrs) == 4

    mft = Mft(io.BytesIO(data))
    record = mft.get(0)
    assert record.filename == "$MFT"
    assert record.filenames() == ["$MFT"]


def test_mft_records_segment_number(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)
    assert fs.mft

    records_forward = list(fs.mft.segments(0, 4))
    assert len(records_forward) == 5
    assert records_forward[0].filename == "$MFT"
    assert records_forward[4].filename == "$AttrDef"

    records_backwards = list(fs.mft.segments(4, 0))
    assert len(records_backwards) == 5
    assert records_backwards[0].filename == "$AttrDef"
    assert records_backwards[4].filename == "$MFT"


def test_mft_record_reparse_cloud(mft_bin: BinaryIO) -> None:
    """Test if the MftRecord.is_cloud_file() method works correctly."""

    fs = NTFS(mft=mft_bin)

    data = bytes.fromhex(
        "46494c4530000300279c0086000000000b000100380001001003000000040000000000000000000007000000748a00000600"
        "0108000000001000000060000000000000000000000048000000180000001084449ee606dc014e3201a4e606dc01d6857682"
        "e706dc01b3012f82e706dc012004000000000000000000000000000000000000310900000000000000000000b860d4210000"
        "0000300000007000000000000000000004005800000018000100e3a00100000002001084449ee606dc011084449ee606dc01"
        "1084449ee606dc011084449ee606dc010000000000000000000000000000000020000000000000000b036500780061006d00"
        "70006c0065002e00740078007400400000002800000000000000000005001000000018000000579007b6d972f011ba7f000c"
        "296de6358000000050000000000018000000010031000000180000005468697320697320616e206578616d706c652066696c"
        "6520696e20746865204f6e65447269766520666f6c646572210d0a00200044006f00c0000000880100000000000000000600"
        "6c010000180000001a600090640100000180e8015db1004665527041e8879700e401000002000a0080070001006000000048"
        "0804006400380600080082c8006c1100600168003c5b1508014ed0004e010ed8000e0a30000400e0000e0004004635006803"
        "000660041e001400310306000006343632656230003432393832353439003566623337313062006263313465386632143530"
        "0426002527373765003164303837356139003534356238623664003535373332653230203866396233054f39390066383435"
        "3161306300333134393234393400383135653664613840363138313065861334003335353935303465006462346466636135"
        "0030613037313162614061393830666685133000383466326434363308323766801535383338203561313537000b33628438"
        "3005770038613680060037616331333136370062310018543d78730185220000a0a54fa67401809337c8f6bf2b214700b52e"
        "a7965bd16b7cc0aff06cabfa05980b0630030725860400000000ffffffff8279471100000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000000000000000000000000600"
    )
    record = MftRecord.from_bytes(data, fs)

    assert record.filename == "example.txt"
    assert record.is_reparse_point()
    assert record.is_cloud_file()
    assert record.open().read() == b"This is an example file in the OneDrive folder!\r\n"


def test_mft_record_reparse_cloud_full(ntfs_cloud_bin: BinaryIO) -> None:
    """Test if offline saved OneDrive MftRecords can be found and read succesfully."""

    fs = NTFS(ntfs_cloud_bin)

    record = fs.mft.get("OneDrive/example.txt")
    assert record.filename == "example.txt"
    assert record.is_cloud_file()
    assert record.is_file()
    assert record.open().read() == b"This is an example file in the OneDrive folder!\r\n"
