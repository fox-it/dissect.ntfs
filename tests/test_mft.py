from __future__ import annotations

import io
from typing import BinaryIO

import pytest

from dissect.ntfs.c_ntfs import FILE_NUMBER_MFT, WOF_COMPRESSION_FORMAT
from dissect.ntfs.exceptions import MftNotAvailableError, VolumeNotAvailableError
from dissect.ntfs.mft import Mft, MftRecord
from dissect.ntfs.ntfs import NTFS


def test_mft(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)

    assert fs.mft
    assert len(list(fs.mft.segments())) == 37

    with pytest.raises(VolumeNotAvailableError):
        assert fs.mft.get(FILE_NUMBER_MFT).open()


def test_mft_record_get_no_mft(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)

    root = fs.mft.root
    fs.mft = None

    with pytest.raises(MftNotAvailableError):
        root.get("$MFT")


def test_mft_record() -> None:
    # Single MFT record of the $MFT file itself.
    data = bytes.fromhex(
        "46494c453000030051511000000000000100010038000100a001000000040000"
        "0000000000000000070000000000000002000000000000001000000060000000"
        "00001800000000004800000018000000d2145d665666d801d2145d665666d801"
        "d2145d665666d801d2145d665666d80106000000000000000000000000000000"
        "0000000000010000000000000000000000000000000000003000000068000000"
        "00001800000003004a000000180001000500000000000500d2145d665666d801"
        "d2145d665666d801d2145d665666d801d2145d665666d8010040000000000000"
        "00400000000000000600000000000000040324004d0046005400000000000000"
        "8000000048000000010040000000060000000000000000003f00000000000000"
        "4000000000000000000004000000000000000400000000000000040000000000"
        "2140550200000000b00000005000000001004000000005000000000000000000"
        "0100000000000000400000000000000000200000000000000810000000000000"
        "0810000000000000210154022101d1fd0000000000000000ffffffff00000000"
        "00000400000000002140550200000000b0000000500000000100400000000500"
        "0000000000000000010000000000000040000000000000000020000000000000"
        "08100000000000000810000000000000210154022101d1fd0000000000000200"
        "ffffffff00000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000200"
    )
    record = MftRecord.from_bytes(data)
    attrs = record.attributes

    assert not record.resident
    assert record.filename == "$MFT"
    assert record.filenames() == ["$MFT"]
    assert record.is_file()
    assert record.size() == 262144
    assert len(attrs) == 4

    mft = Mft(io.BytesIO(data))
    record = mft.get(0)
    assert record.filename == "$MFT"
    assert record.filenames() == ["$MFT"]


def test_mft_records_segment_number(mft_bin: BinaryIO) -> None:
    fs = NTFS(mft=mft_bin)
    assert fs.mft

    records_forward = list(fs.mft.segments(0, 4))
    assert len(records_forward) == 5
    assert records_forward[0].filename == "$MFT"
    assert records_forward[4].filename == "$AttrDef"

    records_backwards = list(fs.mft.segments(4, 0))
    assert len(records_backwards) == 5
    assert records_backwards[0].filename == "$AttrDef"
    assert records_backwards[4].filename == "$MFT"


def test_mft_wof_record() -> None:
    # MFT record of a file with XPRESS4K compression
    data = bytes.fromhex(
        "46494c453000030022ea088e0000000006000100380001002802000000040000"
        "00000000000000000a000000fae3010007000700000000001000000060000000"
        "00000000000000004800000018000000df6d4560f598db013dd21974b899db01"
        "f9721081b899db013a7e65ec5fabdb0120060000000000000000000000000000"
        "00000000130600000000000000000000403a6b1c000000003000000070000000"
        "000000000000040056000000180001006edc010000000100df6d4560f598db01"
        "df6d4560f598db01df6d4560f598db01df6d4560f598db010000000000000000"
        "000000000000000020000000000000000a03740065007300740034006b002e00"
        "7400780074000000400000002800000000000000000005001000000018000000"
        "889d48b5e704f01193ba000c2969a4ef80000000500000000100000000800600"
        "00000000000000000f0000000000000048000400000000000000010000000000"
        "585f000000000000585f00000000000000000000000000000110000000000000"
        "8000000070000000011140000000090000000000000000000000000000000000"
        "6800000000000000001000000000000062060000000000006206000000000000"
        "57006f00660043006f006d007000720065007300730065006400440061007400"
        "61000000000000003101fc852c000000c0000000300000000000000000000700"
        "1800000018000000170000801000000001000000020000000100000000000000"
        "ffffffff82794711000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000700"
    )
    record = MftRecord.from_bytes(data)
    attrs = record.attributes

    assert not record.resident
    assert record.filename == "test4k.txt"
    assert record.filenames() == ["test4k.txt"]
    assert record.is_file()
    assert record.size() == 24408

    assert record.is_reparse_point()
    assert record.is_wof_compressed()

    assert attrs.REPARSE_POINT.wof_compression_format == WOF_COMPRESSION_FORMAT.XPRESS4K
    assert len(attrs) == 5


def test_mft_wof_record_not_implemented_lzx(ntfs_bin: BinaryIO) -> None:
    # MFT record of a file with LZX compression
    data = bytes.fromhex(
        "46494c453000030098ea088e0000000004000100380001005802000000040000"
        "00000000000000000c0000008301000016001600000000001000000060000000"
        "00000000000000004800000018000000e99e089cf898db014457877acd9cdb01"
        "a9065d7ccd9cdb019ae067ec5fabdb0120060000000000000000000000000000"
        "00000000130600000000000000000000389eec1d000000003000000070000000"
        "000000000000040058000000180001006edc010000000100e99e089cf898db01"
        "e99e089cf898db01e99e089cf898db01e99e089cf898db010000000000000000"
        "000000000000000020000000000000000b0374006500730074006c007a007800"
        "2e00740078007400400000002800000000000000000005001000000018000000"
        "a7a048b5e704f01193ba000c2969a4ef80000000500000000100000000800700"
        "00000000000000000f0000000000000048000400000000000000010000000000"
        "207f000000000000207f00000000000000000000000000000110000000000000"
        "80000000a00000000011180000000b00600000004000000057006f0066004300"
        "6f006d0070007200650073007300650064004400610074006100000000000000"
        "f22700010000000045025300ff0d10ca437456bdfefeecff0020000000000080"
        "4168d7e4afc3bfdf20080000000000004000ff4125fff8ffec5acfac72631600"
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa80aa"
        "c0000000300000000000000000000a0018000000180000001700008010000000"
        "01000000020000000100000001000000ffffffff82794711ffffffff82794711"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000001600"
    )
    record = MftRecord.from_bytes(data, NTFS(ntfs_bin))
    attrs = record.attributes

    assert record.resident
    assert record.filename == "testlzx.txt"
    assert record.filenames() == ["testlzx.txt"]
    assert record.is_file()
    assert record.size() == 32544

    assert record.is_reparse_point()
    assert record.is_wof_compressed()

    assert attrs.REPARSE_POINT.wof_compression_format == WOF_COMPRESSION_FORMAT.LZX32K

    with pytest.raises(
        NotImplementedError, match="Compression format not supported for decompression: WOF_COMPRESSION_FORMAT.LZX32K"
    ):
        record.open()


def test_mft_wof_record_not_implemented_lznt1(ntfs_bin: BinaryIO) -> None:
    # Modified MFT record to simulate a file with LZNT1 compression
    data = bytes.fromhex(
        "46494c453000030098ea088e0000000004000100380001005802000000040000"
        "00000000000000000c0000008301000016001600000000001000000060000000"
        "00000000000000004800000018000000e99e089cf898db014457877acd9cdb01"
        "a9065d7ccd9cdb019ae067ec5fabdb0120060000000000000000000000000000"
        "00000000130600000000000000000000389eec1d000000003000000070000000"
        "000000000000040058000000180001006edc010000000100e99e089cf898db01"
        "e99e089cf898db01e99e089cf898db01e99e089cf898db010000000000000000"
        "000000000000000020000000000000000b0374006500730074006c007a007800"
        "2e00740078007400400000002800000000000000000005001000000018000000"
        "a7a048b5e704f01193ba000c2969a4ef80000000500000000100000000800700"
        "00000000000000000f0000000000000048000400000000000000010000000000"
        "207f000000000000207f00000000000000000000000000000110000000000000"
        "80000000a00000000011180000000b00600000004000000057006f0066004300"
        "6f006d0070007200650073007300650064004400610074006100000000000000"
        "f22700010000000045025300ff0d10ca437456bdfefeecff0020000000000080"
        "4168d7e4afc3bfdf20080000000000004000ff4125fff8ffec5acfac72631600"
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa80aa"
        "c0000000300000000000000000000a0018000000180000001700008010000000"
        "010000000200000001000000ffffffffffffffff82794711ffffffff82794711"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000001600"
    )
    record = MftRecord.from_bytes(data, NTFS(ntfs_bin))
    attrs = record.attributes

    assert record.resident
    assert record.filename == "testlzx.txt"
    assert record.filenames() == ["testlzx.txt"]
    assert record.is_file()
    assert record.size() == 32544

    assert record.is_reparse_point()
    assert record.is_wof_compressed()
    assert attrs.REPARSE_POINT.wof_compression_format == WOF_COMPRESSION_FORMAT.LZNT1

    with pytest.raises(
        NotImplementedError, match="Compression format not supported for decompression: WOF_COMPRESSION_FORMAT.LZNT1"
    ):
        record.open()
